I'll guide you step-by-step through the entire process of setting up and running a Docker container for a Python script that prints "Hello, Docker!" Here’s a more detailed breakdown with intermediate steps and explanations.

Prerequisites: Install Docker

For Windows/Mac:

1. Download Docker Desktop:

Go to Docker’s official website and download Docker Desktop for your operating system (Windows or macOS).



2. Install Docker Desktop:

Run the downloaded installer file and follow the on-screen instructions provided by the installation wizard.

After the installation is complete, start Docker Desktop.



3. Verify Docker is Running:

Open Docker Desktop, and make sure it’s running without any errors.

Open a terminal (or Command Prompt on Windows) and type the following command to verify Docker is installed and running:

docker --version

If Docker is installed correctly, it should display the version of Docker you have installed.





---

Steps to Create Docker Image to Run Python Code

Step 1: Write a Simple Python Script

1. Create a new directory for this project on your computer. You can name it docker-python (or any other name you prefer).

mkdir docker-python
cd docker-python


2. Create a Python file (app.py) in this directory.

In the docker-python directory, create a new file named app.py. This file will contain your Python code.

Use a text editor to open app.py and add the following code:

# app.py
print("Hello, Docker!")

Explanation: This code simply prints the message "Hello, Docker!" when run.





---

Step 2: Create a Dockerfile

A Dockerfile is a set of instructions to create a Docker image.

1. Create a file named Dockerfile (without any file extension) in the same directory as app.py.

Use a text editor to open the new Dockerfile and add the following instructions:

# Use an official Python runtime as a parent image
FROM python:3.8-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy the current directory contents into the container at /usr/src/app
COPY . .

# Run the Python script
CMD ["python", "./app.py"]

Explanation of each line:

FROM python:3.8-slim: This sets the base image for our Docker container. Here, we’re using a lightweight version of Python 3.8.

WORKDIR /usr/src/app: This command sets the working directory inside the Docker container to /usr/src/app. Any following commands will be run in this directory.

COPY . .: This copies all files from your current directory (where the Dockerfile is located) on your computer to the working directory inside the container.

CMD ["python", "./app.py"]: This specifies the command to run when the container starts. It tells Docker to execute python ./app.py, which will run the Python script.






---

Step 3: Build the Docker Image

1. Open a terminal (or Command Prompt on Windows) and navigate to the directory where Dockerfile and app.py are located.

cd path/to/docker-python


2. Build the Docker image:

Run the following command to build the Docker image:

docker build -t python-hello-docker .

Explanation:

docker build: This command tells Docker to build an image from the Dockerfile in the current directory.

-t python-hello-docker: The -t flag allows you to tag the image with a name (here, python-hello-docker). You can use this name later to run the container.

.: The dot at the end specifies the current directory as the build context, where Docker will look for the Dockerfile and any other files needed for the image.


Output:

As Docker builds the image, it will show each step on the terminal. After completion, you should see a message indicating that the image was built successfully.




3. Verify the Docker image was created:

To list all Docker images, run:

docker images

You should see python-hello-docker listed among the images.





---

Step 4: Run the Docker Container

1. Run a container from the Docker image:

Use the following command to create and run a container using the image you just built:

docker run python-hello-docker

Explanation:

docker run: This command creates a new container from the specified image and starts it.

python-hello-docker: This is the name of the image we built in the previous step.




2. Check the Output:

After running the command, you should see the output:

Hello, Docker!

This output confirms that the Python script (app.py) ran successfully inside the Docker container.





---

Additional Docker Commands (Optional)

View running containers:

docker ps

This shows all currently running containers.


View all containers (including stopped ones):

docker ps -a

Stop a running container:

Find the container ID using docker ps, then stop it:

docker stop <container_id>


Remove a container:

docker rm <container_id>

Remove an image:

docker rmi python-hello-docker



---

Conclusion

Following these steps, you’ve successfully set up a Docker environment, created a Docker image for a simple Python script, and ran it within a container. Docker allows you to package applications and their dependencies in a consistent environment, making it easy to deploy on different systems.