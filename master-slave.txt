Alright, let's break down each step in detail, covering everything you’ll need as a beginner, including setting up SSH, getting the IP address, and testing. We’ll start from the very basics:

Overview

In Jenkins Master-Slave Architecture, the Master is the main Jenkins server that manages jobs, user access, and plugins. Slaves (or Agents) are additional nodes set up to execute specific build jobs, helping balance the load and speed up build times.

Prerequisites

You need two machines or servers: one as the Jenkins Master and another as the Slave Node.

Jenkins should already be installed on the Master machine.

Basic familiarity with opening a command line/terminal.



---

Step 1: Preparing the Slave Machine

The Slave needs to be set up for SSH access (a secure way to communicate between computers).

1.1. Install Java on the Slave

Jenkins requires Java, so first, install Java on the slave machine:

Open a terminal on your Slave machine.

Install Java using:

Ubuntu/Debian: sudo apt update && sudo apt install openjdk-11-jdk -y

CentOS/RHEL: sudo yum install java-11-openjdk -y


Verify installation: java -version


1.2. Enable SSH on the Slave

SSH allows Jenkins Master to communicate with the Slave securely.

Install and start SSH:

Ubuntu/Debian: sudo apt update && sudo apt install openssh-server -y

CentOS/RHEL: sudo yum install openssh-server -y && sudo systemctl start sshd


Confirm SSH is running: sudo systemctl status sshd



---

Step 2: Get the IP Address of the Slave Machine

To find the IP address of your Slave machine:

Linux/Mac: Open the terminal and type hostname -I or ip a (the IP will look like 192.168.x.x).

Windows: Open Command Prompt, type ipconfig, and look for the IPv4 address under your active network connection.


Note: Write down the IP address, as you'll need it later.



---

Step 3: Set Up SSH Access from Master to Slave

This allows Jenkins on the Master to connect to the Slave without needing a password every time.

3.1. Generate SSH Keys on the Master

On the Jenkins Master machine, open a terminal.

Generate an SSH key:

ssh-keygen -t rsa -b 2048 -C "jenkins-slave-key"

When prompted, press Enter to save the key in the default location (~/.ssh/id_rsa) and leave the passphrase empty.


3.2. Copy the Public Key to the Slave

Still on the Master machine, copy the public key to the Slave:

ssh-copy-id username@slave_ip

Replace username with your Slave machine’s username and slave_ip with the IP address you noted down.

If prompted for a password, enter the password of the Slave’s user.


Test SSH connection: Run ssh username@slave_ip. If you can connect without a password prompt, the SSH setup is complete.



---

Step 4: Configure Jenkins to Add a Slave Node

Now that SSH is set up, let's add the Slave to Jenkins.

4.1. Access Jenkins on the Master Machine

Open Jenkins on your Master machine by going to http://your-master-ip:8080 in a web browser.

Log in with your Jenkins admin credentials.


4.2. Add the Slave Node

1. In Jenkins, go to Manage Jenkins > Manage Nodes and Clouds.


2. Click New Node.


3. Name it (e.g., Slave1) and select Permanent Agent > OK.


4. Configure the following details:

Remote root directory: Choose a directory on the Slave machine (e.g., /home/username/jenkins).

Launch method: Choose Launch agents via SSH.

Host: Enter the IP address of the Slave.

Credentials: Select Add > Jenkins to add SSH credentials:

Kind: SSH Username with private key.

Username: The username you use to log into the Slave machine.

Private Key: Choose Enter Directly and paste the content of your private key (~/.ssh/id_rsa from the Master).




5. Click Save to finish.




---

Step 5: Testing the Setup

5.1. Create a Test Job in Jenkins

1. In Jenkins, go to the Dashboard and click New Item.


2. Enter a name for the job (e.g., Test Slave Connection) and select Freestyle project > OK.



5.2. Configure the Job to Run on the Slave

1. In the General tab of the job, scroll down to Restrict where this project can be run.


2. Enter the name of the Slave node (e.g., Slave1) in the box.



5.3. Add a Simple Build Step

1. Under the Build section, click Add build step > Execute shell.


2. Enter a basic command like echo "Hello from Slave".



5.4. Save and Build

1. Click Save, then select Build Now.


2. Check the Build History and click on the build number to view the Console Output. You should see "Hello from Slave," indicating that the job ran on the Slave.




---

And that’s it! You’ve successfully set up Jenkins Master-Slave Architecture and tested it with a basic build job. Let me know if you want to try more advanced configurations.